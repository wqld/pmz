[package]
name = "pmz"
version = "0.1.7"
edition = "2024"
license = "Apache-2.0"
repository = "https://github.com/wqld/pmz"
description = "Enables access to Kubernetes services via their service domain (e.g., name.namespace.svc) from your local machine"

[features]
default = ["ws"]
ws = ["kube/ws"]

[dependencies]
common = { package = "pmz-common", path = "../common", features = ["user"] }
proxy = { package = "proxy", path = "../proxy"}

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal"] }
clap = { workspace = true, features = ["derive"] }

kube = { version = "0.98", features = ["runtime", "client", "derive"] }
k8s-openapi = { version = "0.24", features = ["latest"] }
futures = "0.3"
hyper = { version = "1.5.2", features = ["full"] }
http-body-util = "0.1.2"
hyper-util = { version = "0.1", features = ["full"] }
serde_json = "1.0.133"
serde = { version = "1.0.216", features = ["derive"] }
tokio-stream = { version = "0.1.17", features = ["net"] }
rsln = "0.0.6"
ipnet = "2.10.1"
http = "1.2.0"
rustls = "0.23.20"
rcgen = "0.13"
udp-stream = "0.0.12"

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
ebpf = { package = "pmz-ebpf", path = "../ebpf" }

[[bin]]
name = "pmz"
path = "src/main.rs"
