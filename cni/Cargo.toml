[package]
name = "cni"
version = "0.1.0"
edition = "2024"

[[bin]]
name = "cni-plugin"
path = "src/plugin/main.rs"

[dependencies]
common = { package = "pmz-common", path = "../common", features = ["user"] }
proto = { package = "proto", path = "../proto"}

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "io-std", "fs"] }
clap = { workspace = true, features = ["derive"] }

chrono = "0.4"
http-body-util = "0.1.2"
hyper = { version = "1.5.2", features = ["full"] }
hyper-util = { version = "0.1", features = ["full"] }
kube = { version = "1.0", features = ["runtime", "client", "derive"] }
k8s-openapi = { version = "0.25", features = ["latest"] }
nix = { version = "0.30", features = ["sched"] }
procfs = "0.17"
rsln = "0.0.7"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio-stream = "0.1"
tonic = "0.13"

[dev-dependencies]
tempfile = "3"

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
ebpf = { package = "pmz-ebpf", path = "../ebpf" }
